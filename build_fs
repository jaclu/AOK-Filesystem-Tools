#!/bin/sh
#  shellcheck disable=SC2154
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  Copyright (c) 2021-2024: Jacob.Lundqvist@gmail.com
#
#  License: MIT
#
#  Creates a FS image suitable for mounting on iSH, the build should
#  be able to complete on any platform.
#  Some options needs chrooting, those steps can only be done when
#  running iSH or Linux(x86)
#

show_help() { # Multi OK 1
    #region help text
    echo "Usage: $prog_name [-h] [-d] [-p] [-N]

This builds the iSH-AOK filesystem.

By default this will build an Alpine FS, unless Debian is requested.

Default is to setup a minimal FS to be completed when deployed, this creates
far smaller image files, at the cost of taking a couple of minutes to complete
on the device upon first boot.

If prebuild is requested, most setup tasks will be done on the buildhost,
except for tasks that must be done on the deploy host.
Using this on a Linux x86 will be 5-10 times faster, compared to the same
tasks being done on the iOS device.

Available options:

-h  --help         Print this help and exit
-v  --verbose      Displays extra info, like untaring/taring progress
-p  --prebuilt     Build the entire FS on the running platform, making
                   for quicker imports on target device, but up to 10
                   times larger image file.
                   This can only be done on iSH itself or Linux (x86)!
-N  --no_compress  Terminates when FS is prepared, without generating
                   a FS tarball.
-d  --debian       Build a Debian FS.
-g  --gentoo       Build a Gentoo FS.
-s  --select       Offer selection between Alpine, Debian & Devuan on first boot.
-f  --force        Force do_chroot.sh to run, despite any warnings
                   it displays.
-c  --clear        Empty the build env ($d_build_root)
-C  --full_clear   Do a clear, and in addition clear the download cache

<*  temporarilly disabled options  *>
-D  --devuan       Build a Devuan FS.

A newly created FS is located at: $d_build_root

If there are remining deploy steps, they will be auto-performed
when you chroot or first boot into it using iSH.

If you want to access the FS without risking to move the deploy
forward, then you can do it like this: ./tools/do_chroot.sh /bin/bash

For normal chroot, just do:  ./tools/do_chroot.sh

After potential FS modifications, you can create a tarball from the FS
by running:  ./compress_image

Then just import this into iSH!
"
    #endregion
    exit 0
}

ensure_real_wget_is_installed() {
    install_wget=false
    _wget_cmd="$(command -v wget)"
    if [ -z "$_wget_cmd" ]; then
        install_wget=true
    elif [ -n "$_wget_cmd" ] && readlink "$_wget_cmd" | grep -q busybox; then
        install_wget=true
        msg_3 "You need to install a real wget, the busybox one does not handle redirects"
    fi
    $install_wget || return

    msg_1 "In order for this to work wget will be installed"

    case "$(detect_fs)" in
    "$distro_alpine")
        #  shellcheck disable=SC2086 # in this case it should expand
        apk add $_deps
        ;;
    "$distro_debian" | "$distro_devuan")
        #  shellcheck disable=SC2086 # in this case it should expand
        apt install $_deps
        ;;
    *)
        echo "Platform not recognized, can not suggest how to install"
        error_msg "You need the following packages: $_deps"
        ;;
    esac

    msg_3 "Dependencies resolved"
}

parse_arguments() { # Multi OK 1
    while [ -n "$1" ]; do

        case "$1" in

        "-h" | "--help") show_help ;;

        "-v" | "--verbose") verbose=true ;;

        "-d" | "--debian")
            if [ "$build_target" = "$destfs_select" ]; then
                echo "Can not be combined: -d and -s"
                exit 1
            fi
            build_target="$distro_debian"
            ;;

        -g | --gentoo)
            if [ "$build_target" = "$destfs_select" ]; then
                echo "Can not be combined: -g and -s"
                exit 1
            fi
            build_target="$distro_gentoo"
            ;;

        #"-D" | "--devuan")
        #    if [ "$build_target" = "$destfs_select" ]; then
        #        echo "Can not be combined: -D and -s"
        #        exit 1
        #    fi
        #    build_target="$distro_devuan"
        #    ;;

        "-s" | "--select")
            if [ "$build_target" = "$distro_debian" ] ||
                [ "$build_target" = "$distro_devuan" ]; then
                echo "Can not be combined: -d/-D and -s"
                exit 1
            fi
            if $pre_build_FS; then
                echo "Can not be combined: -p and -s"
                exit 1
            fi
            build_target="$destfs_select"
            ;;

        "-p" | "--prebuilt")
            if [ "$build_target" = "$destfs_select" ]; then
                echo "Can not be combined: -p and -s"
                exit 1
            fi
            pre_build_FS=true
            ;;

        "-f" | "--force")
            force_chroot="-f"
            ;;

        "-c" | "--clear")
            do_clear
            exit 0
            ;;

        "-C" | "--full_clear")
            do_full_clear
            exit 0
            ;;

        "-N" | "--no_compress")
            aok_FS_do_compress=false
            ;;

        *)
            echo "ERROR: bad param, try -h"
            exit 1
            ;;

        esac
        shift
    done
}

do_clear() {

    # msg_2 "do_clear()"

    [ ! -e "$d_build_root" ] && error_msg "Buildenv not pressent: $d_build_root"
    rm -rf "$d_build_root"
    [ -e "$d_build_root" ] && error_msg "Failed to clear: $d_build_root"
    # msg_3 "do_clear() - done"
}

do_full_clear() {
    # msg_2 "do_full_clear()"
    do_clear
    [ -e "$d_src_img_cache" ] && rm -rf "$d_src_img_cache"
    [ -e "$d_src_img_cache" ] && error_msg "Failed to clear: $d_src_img_cache"
    # msg_3 "do_full_clear() - done"
}

display_build_target() { # Multi OK 1
    #
    #  Displaying build environment
    #
    [ "$build_env" = "$be_ish" ] && dbt_run_mode="Building on iSH"
    [ "$build_env" = "$be_linux" ] && dbt_run_mode="Building on x86 Linux"

    if ! $pre_build_FS; then
        dbt_run_mode="Will not chroot"
    elif [ "$build_env" = "$be_other" ]; then
        echo "Unfortunately, you can not chroot into the image on this device"
        echo "This is only supported on iSH and Linux(x86)"
        echo "Use another build option (try -h for help)"
        exit 1
    fi
    msg_1 "Run mode: $dbt_run_mode"
    unset dbt_run_mode

    if [ "$(whoami)" != "root" ]; then
        # Must come after help display, to avoid infinite loop
        "$0" -h
        error_msg "This must be run as root or using sudo!"
    fi

    if [ "$build_target" = "$distro_debian" ]; then
        release_msg="$distro_debian"
    elif [ "$build_target" = "$distro_devuan" ]; then
        release_msg="$distro_devuan"
    elif [ "$build_target" = "$distro_gentoo" ]; then
        release_msg="$distro_gentoo"
    else
        [ -z "$ALPINE_VERSION" ] && error_msg "ALPINE_VERSION is undefined"
        release_msg="Alpine: $ALPINE_VERSION"
    fi
    msg_1 "Building iSH-AOK $release_msg FileSystem - AOK vers: $AOK_VERSION"
    [ "$release_msg" = "$distro_gentoo" ] && {
        echo "###"
        echo "###   Gentoo builds are in early beta so will proabably not be usefull"
        echo "###"
        echo "###   You have been warned..."
        echo "###"
    }
    unset release_msg

    [ -n "$HOME_DIR_USER" ] && msg_4 "HOME_DIR_USER: $HOME_DIR_USER"
    [ -n "$HOME_DIR_ROOT" ] && msg_4 "HOME_DIR_ROOT: $HOME_DIR_ROOT"
    [ -n "$POPULATE_FS" ] && msg_4 "POPULATE_FS:   $POPULATE_FS"
    [ -n "$PREBUILD_ADDITIONAL_TASKS" ] && {
	echo
        msg_3 "After the first stage of deploy, additioal tasks will be run."
	msg_3 "If pre-build is used this will be done on the build-host."
	msg_3 "Nothing that depends on destination platform should be done here:"
	echo
        msg_4 "PREBUILD_ADDITIONAL_TASKS:   $PREBUILD_ADDITIONAL_TASKS"
    }
    [ -n "$FIRST_BOOT_ADDITIONAL_TASKS" ] && {
	echo
        msg_3 "At the end of the first boot on dest platform, additioal tasks will be run:"
        msg_4 "FIRST_BOOT_ADDITIONAL_TASKS: $FIRST_BOOT_ADDITIONAL_TASKS"
    }
    if ! $aok_FS_do_compress; then
        echo
        msg_2 "*** Will not create the compressed image! ***"
    fi
    echo
}

cache_fs_image() {
    msg_2 "cache_fs_image()"
    [ -z "$src_image" ] && error_msg "cache_fs_image() no src_image supplied"
    [ -z "$src_tarball" ] && error_msg "cache_fs_image() no src_taball supplied"

    if [ ! -d "$d_src_img_cache" ]; then
        mkdir -p "$d_src_img_cache"
    fi
    cd "$d_src_img_cache" || {
        error_msg "Failed to cd to $d_src_img_cache"
    }
    if [ ! -f "$d_src_img_cache/$src_tarball" ]; then
        #  Ensure basename for tar ball is used
        case "$build_target" in

        "$distro_alpine" | "$destfs_select") ;; # cmd="$cmd -O $alpine_src_tb" ;;
        "$distro_debian") ;;                    # cmd="$cmd -O $debian_src_tb" ;;
        "$distro_devuan") ;;                    # cmd="$cmd -O $devuan_src_tb" ;;
        "$distro_gentoo") ;;                    #cmd="wget '$src_image' -O $gentoo_src_tb" ;;
        *)
            error_msg "Invalid build_target: $build_target"
            ;;
        esac

        ensure_real_wget_is_installed
        wget --no-check-certificate "$src_image" -O "$src_tarball" || {
            echo "ERROR: Failed to download $src_image"
            exit 1
        }
    fi
    # msg_3 "cache_fs_image() done"
}

copy_AOK_to_dest() {
    #
    #  Copy AOK content to destination
    #
    msg_2 "copy_AOK_to_dest()"
    [ -z "$d_build_root" ] && {
        error_msg "copy_AOK_to_dest() - d_build_root undefined"
    }
    aok_files="${d_build_root}"/opt/AOK
    mkdir -p "$aok_files"
    mkdir -p "$d_build_root"/etc/opt
    rsync_chown /opt/AOK/ "$aok_files" silent
    # msg_3 "copy_AOK_to_dest() done"
}

setup_Alpine_on_1st_boot() {
    msg_2 "setup_Alpine_on_1st_boot()"
    set_new_etc_profile "$scr_setup_alpine"
    # msg_3 "setup_Alpine_on_1st_boot() done"
}

setup_Debian_on_1st_boot() {
    msg_2 "setup_Debian_on_1st_boot()"
    # shellcheck source=/opt/AOK/FamDeb/deb_utils.sh
    . /opt/AOK/FamDeb/deb_utils.sh
    initial_fs_prep_fam_deb
    # buildtype_set "$distro_debian"
    set_new_etc_profile "$scr_setup_debian"
    # msg_3 "setup_Debian_on_1st_boot() done"
}

setup_Devuan_on_1st_boot() {
    msg_2 "setup_Devuan_on_1st_boot()"
    # shellcheck source=/opt/AOK/FamDeb/deb_utils.sh
    . /opt/AOK/FamDeb/deb_utils.sh
    initial_fs_prep_fam_deb
    # buildtype_set "$distro_devuan"
    set_new_etc_profile "$scr_setup_devuan"
    # msg_3 "setup_Devuan_on_1st_boot() done"
}

setup_Gentoo_on_1st_boot() {
    msg_2 "setup_Gentoo_on_1st_boot()"
    cp -a /opt/AOK/Gentoo/etc/inittab "$d_build_root"/etc
    set_new_etc_profile "$scr_setup_gentoo"
    # msg_3 "setup_Gentoo_on_1st_boot() done"
}

select_distro_on_1st_boot() {
    #
    #  If this build platform cant chroot, then the preparational steps
    #  will be run on 1st boot, a slight delay, but end result is
    #  the same.
    #
    msg_2 "select_distro_on_1st_boot()"
    touch "$f_destfs_select_hint"
    set_new_etc_profile "$scr_select_distro_prepare"
    # msg_3 "select_distro_on_1st_boot()  done"
}

prebuild_fs() {
    msg_1 "prebuild_fs()"
    msg_1 "><> #######  $(date)  #######"

    if [ "$build_env" = "$be_other" ]; then
        error_msg "Not possible to pre-build on this environment!"
    fi

    # In preparation for chrooting leave new FS folder
    cd /opt/AOK || error_msg "Failed to cd into: /opt/AOK"

    deploy_state_set "$deploy_state_pre_build"
    [ -n "$force_chroot" ] && msg_3 "Forcing chroot to run"
    /opt/AOK/tools/do_chroot.sh "$force_chroot" /etc/profile || {
        error_msg "There was an error during prebuild"
    }

    msg_1 "Returned from prebuild chroot"
    msg_1 "><> #######  $(date)  #######"

    #
    #  This ensures openrc doesnt detect previous runstates during
    #  1st boot and thus triggering some errors during boot & sysinit
    #
    msg_2 "Clearing run states after pre-build"
    rm "$d_build_root"/run/openrc -rf

    #  Make sure no leftover fixdev pid file remains
    rm "$d_build_root"/tmp/fixdev.pid -f

    echo
    # msg_3 "prebuild_fs() done"
}

consider_generating_tarball() {
    #
    #  Consider to generate a tarball
    #
    if $aok_FS_do_compress; then
        cgt_extra_params=""
        if $verbose; then
            cgt_extra_params="-v"
        fi
        if [ -n "$d_build_root" ] && ls -A "$d_build_root"/iCloud/* >/dev/null 2>&1; then
            #
            #  iCloud might have been used whilst chrooted, this ensures
            #  that it is empty when FS is compressed
            #
            msg_3 "Clearing /iCloud before generating image"
            rm "$d_build_root"/iCloud/* -rf
        fi

        #
        #  Here the tarball is generated
        #
        #  shellcheck disable=SC2086 # in this case variable should expand
        if ! /opt/AOK/compress_image "$cgt_extra_params"; then
            error_msg "detected in compress_image"
        fi

        unset cgt_extra_params
        unset cgt_label
    fi

    # msg_3 "consider_generating_tarball() done"
}

display_build_time() {
    msg_2 "display_build_time()"
    dbt_duration="$(($(date +%s) - t_build_start))"
    if $pre_build_FS; then
        dbt_lbl="Create and setup FS"
    else
        dbt_lbl="Create FS"
    fi
    display_time_elapsed "$dbt_duration" "$dbt_lbl"
    unset dbt_duration
    unset dbt_lbl
    # msg_3 "display_build_time() done"
}

#===============================================================
#
#   Main
#
#===============================================================

hide_run_as_root=1 . /opt/AOK/tools/run_as_root.sh
[ -z "$d_aok_etc" ] && . /opt/AOK/tools/utils.sh

t_build_start="$(date +%s)"

# shellcheck disable=SC1007
prog_name=$(basename "$0")

#
#  Point to AOK-Filesystem-Tools dir, in case this was run with a path
#  to keep things relative and simple
#
#  shellcheck disable=SC1007
cd /opt/AOK || error_msg "Failed to cd into: /opt/AOK"

#
#  Default for options
#
build_target="$distro_alpine" # default target
verbose=false                 # true displays tar/untar progress
pre_build_FS=false            # true means generate pre-built FS
aok_FS_do_compress=true       # compress FS at end of build_fs

parse_arguments "$@"

is_fs_chrooted && error_msg "You can't build an FS when already chrooted!"

display_build_target

msg_2 "Preparing build environment"

msg_3 "Clearing build root $d_build_root"
[ -z "$d_build_root" ] && error_msg "d_build_root not assigned"
rm -rf "$d_build_root" || error_msg "Failed to clear out: $d_build_root"
mkdir -p "$d_build_root" || error_msg "Failed to mkdir $d_build_root"
deploy_state_set "$deploy_state_na" # Dest FS not yet created

if [ "$build_target" = "$distro_debian" ]; then
    src_image="$DEBIAN_SRC_IMAGE"
    src_tarball="$debian_src_tb"
elif [ "$build_target" = "$distro_devuan" ]; then
    src_image="$DEVUAN_SRC_IMAGE"
    src_tarball="$devuan_src_tb"
elif [ "$build_target" = "$distro_gentoo" ]; then
    src_image="$GENTOO_SRC_IMAGE"
    src_tarball="$gentoo_src_tb"
else
    src_image="$alpine_src_image"
    src_tarball="$alpine_src_tb"
fi
cache_fs_image
create_fs "${d_src_img_cache}/$src_tarball" "$d_build_root" "$verbose"

copy_AOK_to_dest
msg_3 "Deployed /opt/AOK on new filesystem"

#  Announce what AOK release this is
msg_2 "Set $(echo "$f_aok_fs_release" | sed "s|$d_build_root||") to $AOK_VERSION"

echo "$AOK_VERSION" >"$f_aok_fs_release"

#
#  Alpine initial motd suggests running setup-alpine. Not available on iSH
#  Since setup_alpine.sh will create an AOK relevant motd,
#  deleting the default one both on Alpine & Debian makes sence.
#
msg_2 "Remove initial /etc/motd from new filesystem"
rm "$d_build_root"/etc/motd

# Should always happen
msg_2 "Create directory /iCloud inside new filesystem"
mkdir -p "$d_build_root"/iCloud

if [ -n "$POPULATE_FS" ]; then
    #
    #  So far unofficial hack, if you put d_build_root in POPULATE_FS
    #  it will be replaced with actual build_root during creation of
    #  FS, most likely will never be used by anyone but me during chroot
    #  test deploys
    #
    pop_fs="$(echo "$POPULATE_FS" | sed "s#D_BUILD_ROOT#$d_build_root#g")"
    msg_2 "POPULATE_FS requested"
    echo "$pop_fs"
    echo
    /bin/sh -c "$pop_fs" || {
        error_msg "POPULATE_FS [$pop_fs] returned error"
    }
fi

if [ "$build_target" = "$distro_debian" ]; then
    setup_Debian_on_1st_boot
elif [ "$build_target" = "$distro_devuan" ]; then
    setup_Devuan_on_1st_boot
elif [ "$build_target" = "$distro_gentoo" ]; then
    setup_Gentoo_on_1st_boot
elif [ "$build_target" = "$destfs_select" ]; then
    select_distro_on_1st_boot
else
    setup_Alpine_on_1st_boot
fi

if $pre_build_FS; then
    prebuild_fs
else
    msg_3 "Install stuff needed for bootup if aok_launcher is used"
    rsync_chown /opt/AOK/common_AOK/usr_local_bin/logger \
        "$d_build_root"/usr/local/bin/
    rsync_chown /opt/AOK/common_AOK/usr_local_bin/network-check \
        "$d_build_root"/usr/local/bin/
    rsync_chown /opt/AOK/common_AOK/usr_local_sbin/aok_launcher \
        "$d_build_root"/usr/local/sbin/
fi

msg_2 "The filesystem is ready!"
msg_1 "><> #######  $(date)  #######"

consider_generating_tarball

display_build_time
