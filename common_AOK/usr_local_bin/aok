#!/bin/sh
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2022-2024: Jacob.Lundqvist@gmail.com
#
#  Script to do various things related to the configuration of ish
#

show_help() {
    txt="Usage: $prog_name [-h] [-v] [-l login procedure]

An AOK-only script that manages iSH/AOK specific things.

Available options:

-h --help          Print this help and exit
-a --autologin     Auto-login as user [disable|username]
                   disable  - Will give login prompt
                   username - Will auto-login as username
-b --boot-cmd      Choose Init cmd: $boot_cmd_options
-c --continous     New login prompt after vterm logout [on|off]
-l --launch-cmd    Choose Launch cmd: $launch_cmd_options
                   Launch cmd has very strict syntax requirements.
                   1. wrap it in '[ ]'
                   2. Each statement/param must be wrapped in \"\"
                   3. If more than one statement, separate with commma space
                   The default: '$launch_cmd_default'
-H --profile-hints Show env hints in /etc/profile [on|off]
-s --aoksuffix     Ensure -aok is added as suffix to hostname
                   on iSH-AOK kernels [on|off]
                   Ignored on regular iSH
-C --console       Use first vterm (/dev/pts/0) as console,
                   disabling logins on this vterm
"
    this_is_aok_kernel && {
        txt="${txt}
iSH-AOK options:

-e --extra_locking  Use kernel extralocking [on|off]
                    Switching it on may improve stability but impacts
                    performance  WARNING: turning this off sometimes causes
                    session to hang, but change did happen!
-m --multicore      Switch multicore processing [on|off]
                    Switching it off improves stability but impacts performance
"
    }
    txt="$txt
Current settings:
$(
        autologin_display
        boot_cmd_display
        continous_sessions_display
        launch_cmd_display
        profile_hints_display
        aok_suffix_display
        console_mode_display
    )
"
    this_is_aok_kernel && {
        txt="${txt}$(
            extralocking_display
            multicore_display
        )

"
    }
    echo "$txt"
    exit 0
}

#  shellcheck disable=SC2317
destfs_is_alpine() {
    test -f /etc/alpine-release
}

show_on_off_by_file() {
    [ -z "$1" ] && {
        error_msg "show_on_off_by_file() - no param given"
    }
    if [ -f "$1" ]; then
        echo "on"
    else
        echo "off"
    fi
}

#===============================================================
#
#       auto-login
#
#===============================================================

autologin_change() {
    [ -z "$1" ] && {
        error_msg "autologin_change() - no param given"
    }
    uname_autologin="$1"

    if [ "$uname_autologin" = "disable" ]; then
        echo "disabling auto-login"
        rm -f "$f_login_default_user"
    else
        eval "_h=~$uname_autologin"
        # shellcheck disable=SC2154
        [ -d "$_h" ] || {
            error_msg "$uname_autologin does not seem to be a valid user on this system"
        }
        echo "$uname_autologin" >"$f_login_default_user"
        if [ -f "$f_logins_continous" ]; then
            continous_setting="continous "
        else
            continous_setting=""
        fi
        echo "Enabled ${continous_setting}auto-login for user: $uname_autologin"
        unset continous_setting
    fi
    autologin_display syslog

    unset uname_autologin
}

autologin_settting() {
    if [ -f "$f_login_default_user" ]; then
        cat "$f_login_default_user"
    else
        echo "disabled"
    fi
}

autologin_display() {
    _m="autologin:     $(autologin_settting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

autologin_disabled="disabled"

#===============================================================
#
#       Continous login sessions
#
#===============================================================

continous_sessions_change() {
    continous_mode="$1"
    [ -z "$continous_mode" ] && {
        error_msg "continous_sessions_change() - no param given, options are on/off"
    }
    [ -z "$f_logins_continous" ] && {
        error_msg "continous_sessions_change() - f_logins_continous undefined"
    }
    case "$continous_mode" in
    "on")
        if this_fs_is_chrooted; then
            continous_sessions_change "off"
            error_msg "Can't set continous sessions on chrooted system"
        fi
        touch "$f_logins_continous"
        ;;

    "off") rm -f "$f_logins_continous" ;;

    *)
        error_msg "continous_sessions_change() - options are on/off"
        ;;
    esac
    continous_sessions_display syslog

    unset continous_mode
}

continous_sessions_setting() {
    cont_ses_setting="$(show_on_off_by_file "$f_logins_continous")"
    if [ "$cont_ses_setting" = "off" ]; then
        echo "vterm will terminate after logout"
    else
        cont_ses_setting="$(autologin_settting)"
        if [ "$cont_ses_setting" = "$autologin_disabled" ]; then
            echo "vterm will sttart a new session after logout"
        else
            echo "vterm will autlogin as username: $cont_ses_setting"
        fi
    fi
    unset cont_ses_setting
}

continous_sessions_display() {
    _m="continnous:    $(continous_sessions_setting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

#===============================================================
#
#       Boot Cmd
#
#===============================================================

boot_cmd_change() {
    boot_cmd="$1"

    [ -z "$boot_cmd" ] && {
        error_msg "boot_cmd_change() - no param given"
    }
    this_fs_is_chrooted && error_msg "Can't change boot_command on chrooted system"

    case "$boot_cmd" in
    "default") set_kernel_default boot_command '[ "/sbin/init" ]' ;;
    *) set_kernel_default boot_command "$boot_cmd" ;;
    esac
    boot_cmd_display syslog
}

boot_cmd_display() {
    _m="Boot cmd:      '$(get_kernel_default boot_command)'"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

boot_cmd_options="default|'[ \"custom_cmd\" ]'"

#===============================================================
#
#       Launch Cmd
#
#===============================================================

launch_cmd_change() {
    lnch_cmd="$1"

    [ -z "$lnch_cmd" ] && {
        error_msg "launch_cmd_change() - no param given"
    }
    this_fs_is_chrooted && error_msg "Can't change launch_command on chrooted system"

    case "$lnch_cmd" in
    "default")
        set_kernel_default launch_command "$launch_cmd_default"
        [ -f "$f_pts_0_as_console" ] && {
            echo
            echo "WARNING: With the default launcher, using console"
            echo "         will not work great!"
            echo
        }
        ;;
    "aok") set_kernel_default launch_command "$launch_cmd_AOK" ;;

    *) set_kernel_default launch_command "$lnch_cmd" ;;
    esac
    launch_cmd_display syslog
}

launch_cmd_display() {
    _m="Launch cmd:    '$(get_kernel_default launch_command)'"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

launch_cmd_options="aok|default|'[ \"custom_cmd\" ]'"
launch_cmd_default='[ "/bin/login", "-f", "root" ]'

#===============================================================
#
#       Profile hints
#
#  Display suggestons about sshd and sudo in profile
#
#===============================================================

profile_hints_change() {
    hints_mode="$1"
    [ -z "$hints_mode" ] && {
        error_msg "profile_hints_change() - no param given, options are on/off"
    }
    case "$hints_mode" in
    "on") touch "$f_profile_hints" ;;
    "off") rm -f "$f_profile_hints" ;;
    *)
        error_msg "profile_hints_change() - options are on/off"
        ;;
    esac
    profile_hints_display syslog
}

profile_hints_setting() {
    show_on_off_by_file "$f_profile_hints"
}

profile_hints_display() {
    _m="profile-hints: $(profile_hints_setting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

#===============================================================
#
#       aok suffix
#
#===============================================================

aok_suffix_change() {
    use_suffix="$1"
    [ -z "$use_suffix" ] && {
        error_msg "aok_suffix_change() - no param given, options are on/off"
    }
    case "$use_suffix" in
    "on") touch "$f_hostname_aok_suffix" ;;
    "off") rm -f "$f_hostname_aok_suffix" ;;
    *)
        error_msg "aok_suffix_change() - options are on/off"
        ;;
    esac
    aok_suffix_display syslog
}

aok_suffix_setting() {
    show_on_off_by_file "$f_hostname_aok_suffix"
}

aok_suffix_display() {
    _m="aoksuffix:     $(aok_suffix_setting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

#===============================================================
#
#       console mode
#
#===============================================================

console_mode_change() {
    use_console="$1"
    f_rc_conf=/etc/rc.conf

    [ -z "$use_console" ] && {
        error_msg "console_mode_change() - no param given, options are on/off"
    }
    this_fs_is_chrooted && error_msg "Can't change console on chrooted system"

    case "$use_console" in
    "on")
        touch "$f_pts_0_as_console"
        [ "$(stat -c "%t %T" /dev/console)" != "88 0" ] && {
            echo "Setting up /dev/pts/0 as console"
            rm -f /dev/console
            mknod -m 666 /dev/console c 136 0
        }

        if [ -f /etc/alpine-release ]; then
            #
            #  Activating logging in /etc/rc.conf leads to openrc getting
            #  stuck on debian
            #  Disabled for now
            #  TODO: Investigate
            #
            [ -f "$f_rc_conf" ] && {
                if grep -q "rc_logger=" "$f_rc_conf"; then
                    sed -i '/^[[:space:]]*#*[[:space:]]*rc_logger=/c\rc_logger="YES"' \
                        "$f_rc_conf" || {

                        error_msg "Failed to enable rc_logger in $f_rc_conf"
                    }
                else
                    # If it wasnt pressent, add it
                    echo 'rc_logger="YES"' >>"$f_rc_conf"
                fi
                if grep -q "rc_log_path=" "$f_rc_conf"; then
                    sed -i '/^[[:space:]]*#*[[:space:]]*rc_log_path=/c\rc_log_path="/var/log/rc.log"' \
                        "$f_rc_conf" || {

                        error_msg "Failed to enable rc_log_path in $f_rc_conf"
                    }
                else
                    # If it wasnt pressent, add it
                    echo 'rc_log_path="/var/log/rc.log"' >>"$f_rc_conf"
                fi
            }
        fi

        [ "$(get_kernel_default launch_command)" = "$launch_cmd_default" ] && {
            echo
            echo "WARNING: With the default launcher, using console"
            echo "         will not work great!"
            echo
        }

        ;;
    "off")
        rm -f "$f_pts_0_as_console"
        [ "$(stat -c "%t %T" /dev/console)" != "5 1" ] && {
            echo "Reverting console to normal mode"
            rm -f /dev/console
            mknod -m 666 /dev/console c 5 1
        }

        # if /dev/console is not used and rc_logger=YES openrc gets stuck
        [ -f "$f_rc_conf" ] && {
            sed -i '/^[[:space:]]*#*[[:space:]]*rc_logger=/c\#rc_logger="NO"' \
                "$f_rc_conf" || {

                error_msg "Failed to disable rc_logger in $f_rc_conf"
            }
            sed -i '/^[[:space:]]*#*[[:space:]]*rc_log_path=/c\#rc_log_path="/var/log/rc.log"' \
                "$f_rc_conf" || {

                error_msg "Failed to disable rc_log_path in $f_rc_conf"
            }
        }
        ;;
    *)
        error_msg "console_mode_change() - options are on/off"
        ;;
    esac
    console_mode_display syslog
    echo "This will take effect next time App is run."
}

console_mode_setting() {
    show_on_off_by_file "$f_pts_0_as_console"
}

console_mode_display() {
    _m="console:       $(console_mode_setting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

#===============================================================
#
#       kernel extralocking
#
#===============================================================

extralocking_change() {
    do_elock="$1"

    [ -z "$do_elock" ] && {
        error_msg "extralocking_change() - no param given, options are on/off"
    }
    this_fs_is_chrooted && error_msg "Can't change extra_locking on chrooted system"
    this_is_aok_kernel || {
        error_msg "extralocking_change() only usable on iSH-AOK kernels"
    }

    case "$do_elock" in
    "on") echo "true" >"$f_elock" ;;
    "off") echo "false" >"$f_elock" ;;
    *)
        error_msg "extralocking_change() - options are on/off"
        ;;
    esac
    extralocking_display syslog
}

extralocking_setting() {
    this_is_aok_kernel || {
        error_msg "extralocking_setting() only usable on iSH-AOK kernels"
    }
    [ -f "$f_elock" ] || error_msg "Not found: $f_elock"
    case "$(cat "$f_elock")" in
    "true") echo "on" ;;
    "false") echo "off" ;;
    *) error_msg "Unknown state in $f_elock" ;;
    esac
}

extralocking_display() {
    _m="extralocking:  $(extralocking_setting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

f_elock=/proc/ish/defaults/enable_extralocking

#===============================================================
#
#       multicore processing
#
#===============================================================

multicore_change() {
    do_multicore="$1"

    [ -z "$do_multicore" ] && {
        error_msg "multicore_change() - no param given, options are on/off"
    }
    this_fs_is_chrooted && error_msg "Can't change multicore on chrooted system"
    this_is_aok_kernel || {
        error_msg "multicore_change() only usable on iSH-AOK kernels"
    }

    case "$do_multicore" in
    "on") echo "true" >"$f_multicore" ;;
    "off") echo "false" >"$f_multicore" ;;
    *)
        error_msg "multicore_change() - options are on/off"
        ;;
    esac
    multicore_display syslog
}

multicore_setting() {
    this_is_aok_kernel || {
        error_msg "multicore_setting() only usable on iSH-AOK kernels"
    }
    [ -f "$f_multicore" ] || error_msg "Not found: $f_multicore"
    case "$(cat "$f_multicore")" in
    "true") echo "on" ;;
    "false") echo "off" ;;
    *) error_msg "Unknown state in $f_multicore" ;;
    esac
}

multicore_display() {
    _m="multicore:     $(multicore_setting)"
    if [ "$1" = "syslog" ]; then
        syslog "$_m"
    else
        echo "$_m"
    fi
    unset _m
}

f_multicore=/proc/ish/defaults/enable_multicore

#===============================================================
#
#   Main
#
#===============================================================

hide_run_as_root=1 . /opt/AOK/tools/run_as_root.sh
. /opt/AOK/tools/utils.sh

prog_name=$(basename "$0")

[ -z "$1" ] && show_help

while [ -n "$1" ]; do
    case "$1" in

    "-h" | "--help")
        show_help
        ;;

    "-a" | "--autologin")
        #  skip if $2 starts with - another option
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            autologin_change "$2"
            shift # get rid of extra option
        else
            autologin_display
        fi
        ;;

    "-b" | "--boot-cmd")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            boot_cmd_change "$2"
            shift # get rid of extra option
        fi
        boot_cmd_display
        ;;

    "-c" | "--continous")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            continous_sessions_change "$2"
            shift # get rid of extra option
        fi
        continous_sessions_display
        ;;

    "-e" | "--extra_locking")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            extralocking_change "$2"
            shift # get rid of extra option
        fi
        extralocking_display
        ;;

    "-l" | "--launch-cmd")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            launch_cmd_change "$2"
            shift # get rid of extra option
        fi
        launch_cmd_display
        ;;

    "-m" | "--multicore")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            multicore_change "$2"
            shift # get rid of extra option
        fi
        multicore_display
        ;;

    "-s" | "--aoksuffix")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            aok_suffix_change "$2"
            shift # get rid of extra option
        fi
        aok_suffix_display
        ;;

    "-H" | "--profile-hints")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            profile_hints_change "$2"
            shift # get rid of extra option
        fi
        profile_hints_display
        ;;

    "-C" | "--console")
        if [ -n "$2" ] && [ "${2%"${2#?}"}" != "-" ]; then
            console_mode_change "$2"
            shift # get rid of extra option
        fi
        console_mode_display
        ;;

    *)
        msg_2 "ERROR: Bad option: $1"
        show_help
        ;;

    esac
    shift
done
