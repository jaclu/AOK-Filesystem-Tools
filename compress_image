#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023: Jacob.Lundqvist@gmail.com
#
#  Compresses a FS into a tar file that can be mounted by iSH
#

show_help() {
    echo "Usage: $prog_name [-h] [-v] [-z]

This creates a compressed tar file. that iSH can mount as a file system
It autodetects FS type, and will use a matching filename for the tarball.

Available options:

-h  --help         Print this help and exit.
-l  --label        Provide a name for tarball (without path or extension)
-v  --verbose      Display progrss as FS is being compressed."
    exit 0
}

clear_build_triggered_logfiles() {
    f_fd_log="/var/log/fix_dev.log"
    f_sys_log="/var/log/syslog"
    br_fd_log="${d_build_root}$f_fd_log"
    br_sys_log="${d_build_root}$f_sys_log"
    if [ -f "$br_fd_log" ] || [ -f "br_sys_log" ]; then
        msg_2 "Removing log files generated during preparations on client FS"
        [ -f "$br_fd_log" ] && msg_3 "$f_fd_log" && rm -f "$br_fd_log"
        [ -f "$br_sys_log" ] && msg_3 "$f_sys_log" && rm -f "$br_sys_log"
    fi
}

clear_fake_iCloud() {
    if [ -n "$d_build_root" ] && ls -A "$d_build_root"/iCloud/* >/dev/null 2>&1; then
	#
	#  iCloud might have been used whilst chrooted, this ensures
	#  that it is empty when FS is compressed
	#
	msg_3 "Clearing /iCloud before generating image"
	rm "$d_build_root"/iCloud/* -rf
    fi
}

#===============================================================
#
#   Main
#
#===============================================================

hide_run_as_root=1 . /opt/AOK/tools/run_as_root.sh
. /opt/AOK/tools/utils.sh

prog_name=$(basename "$0")
verbose=false

#
#  If this is built on an iSH node, and iCloud is mounted, the image is
#  copied to this location
#
d_icloud_archive=/iCloud/AOK_Archive

while [ -n "$1" ]; do

    case "$1" in

    "-h" | "--help") show_help ;;

    "-l" | "--label")
        shift
        tar_name="$1"
        if [ -z "$tar_name" ]; then
            echo "ERROR: label needs name as additional param!"
            exit 1
        fi
        ;;

    "-v" | "--verbose") verbose=true ;;

    *)
        error_msg "bad param, try -h"
        ;;
    esac
    shift
done

if [ ! -d "$d_build_root" ]; then
    error_msg "No image built empty dir: [$d_build_root]!"
fi

if [ "$(find "$d_build_root"/dev | wc -l)" -gt 1 ]; then
    error_msg "Active chroot session detected!"
fi

if [ -n "$tar_name" ]; then
    tarball_fn="${tar_name}"
else
    #
    #  If no tarball name was given, try to identify what is prepared
    #  and give it a name  based on this with versions added.
    case "$(destfs_detect)" in
    "$destfs_select")
        tarball_fn="SelectDistro-AOK-${AOK_VERSION}"
        ;;
    "$distro_alpine")
        msg_3 "Getting release details for Alpine"
        if get_lsb_release; then
            tarball_fn="${lsb_DistributorID}-${lsb_Release}-AOK-${AOK_VERSION}"
        else
            msg_4 "lsb_release unavailable, manually naming tar"
            tarball_fn="Alpine-$(cat "$d_build_root"/etc/alpine-release)-AOK-${AOK_VERSION}"
        fi
        ;;
    "$distro_debian" | "$distro_devuan")
        msg_3 "Getting release details for Debian/Devuan"
        if get_lsb_release; then
            tarball_fn="${lsb_DistributorID}-${lsb_Release}-AOK-${AOK_VERSION}"
        else
            msg_4 "lsb_release unavailable, manually naming tar"
            tarball_fn="Debian-$(cat "$d_build_root"/etc/debian_version)-AOK-${AOK_VERSION}"
        fi
        ;;

    *) error_msg "Could not detext FS type" ;;
    esac
    deploy_state_is_it "$deploy_state_pre_build" && tarball_fn="$tarball_fn-pb"
fi

# set location
mkdir -p "$TMPDIR/aok_imgs"
tarball="$TMPDIR/aok_imgs/$tarball_fn"

# echo "removing temp /dev items"
# rm  -f "$d_build_root"/dev/*

#
# Tar up and zip the result
#
cd "$d_build_root" || {
    error_msg "Failed to cd into: $d_build_root"
}

opts="cfz"
tarball="${tarball}.tgz"
tarball_fn="${tarball_fn}.tgz"

if $verbose; then
    opts="v$opts"
fi

clear_build_triggered_logfiles
clear_fake_iCloud

msg_2 "Writing image file"
msg_3 "$tarball"
cmd_pigz="$(command -v pigz)"
if [ -n "$cmd_pigz" ]; then
    opts="$(echo "$opts" | tr -d 'z')"
    msg_4 "Using $cmd_pigz"
    tar -"$opts" - . | $cmd_pigz >"$tarball"
else
    msg_4 "No pigz"
    tar "$opts" "$tarball" .
fi
ex_code="$?"

if [ "$ex_code" = 0 ]; then
    #
    # copy it to $d_icloud_archive if this runs on iSH
    #
    if this_is_ish && [ "$(find /iCloud/ -maxdepth 1 | wc -l)" -gt 1 ]; then
        msg_2 "Creating additional copy: $d_icloud_archive/$tarball_fn"
        mkdir -p "$d_icloud_archive"
        cp "$tarball" "$d_icloud_archive"
    fi

    msg_3 "Image is ready: $tarball"
else
    msg_1 "tar cmd exited with: $ex_code"
fi
exit "$ex_code" #  Propagate any tar error
